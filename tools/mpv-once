#!/bin/bash
#
# check lib.sh for lots of options
#
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $DIR/lib.sh

display=0
pipe=$tmp/mpv-pipe
auto=
start_time=0:45
ao=${ao:-pulse}
myname="mpv-once-$RANDOM-$PPID"

STR=(on off)
unset echo
delim=$(echo -e "\t")

[[ -n "$NOSCORE" ]] && NOPROMPT=1 || NOPROMPT=
# [[ -e $pipe ]] || mkfifo $pipe

[[ -e $DIR/prefs.sh ]] && . $DIR/prefs.sh
# We don't do anything above this in case
# we are trying to get something to override our vars

_mkdir $tmp

history -r $tmp/readline-history
shopt -s nullglob

function set_filter() {
  filter=.
  if [[ $# -gt 0 ]]; then
    filter="($1"
    shift
    while [[ $# -gt 0 ]]; do
      filter="${filter}|${1}"
      shift
    done
    filter="$filter)"
  fi
}

# This appears to take about 0.1s or so.
function load_tracks() {
  all=( $(unlistened "$filter") )
  size=${#all[@]}
  [[ -n "$1" ]] && echo $size
}

function record_listen() {
  local lock="$tmp/backup-lock"
  if [[ "$n" != "__nothing" ]]; then 
    {
      cp $start_dir/.listen_done $tmp/.listen_done-$(date +%Y%m%d%H%M%S)

      # Remove any previous record of this
      st=$( echo "$i" | tr '//' '.' )
      sed -i "/$st/d" $start_dir/.listen_done

      # Also record how many audio files we saw at the time
      echo "$i $n ($_stats) $(date +%Y%m%d)" >> $start_dir/.listen_done

      # If we do this too frequently it's pretty broken
      # But we also have to be smart enough to not block us out
      if [[ -e "$lock" ]]; then
        local age=$(( $( date +%s ) - $(stat -c %Y "$lock") ))
        (( age > 86400 )) && rm $lock
      fi

      if [[ -n "$NOSCORE" && ! -e "$lock" ]]; then
        touch "$lock"
        backup 
        rm "$lock"
      fi
    } &
  fi
}

function playit() {
  [[ $# == 0 ]] && return -10
  before=$( date +%s )

  $player --ao=$ao $player_opts \
    --term-playing-msg=" \${playlist-pos-1}\t\${media-title}" \
    --term-status-msg="\t\t\${audio-pts} - \${duration}\n" \
    --start=$start_time \
    $*
}

[[ -f "$1" ]] && set_filter $(< $1) || set_filter $*

scan

touch $start_dir/.listen_done

load_tracks 1

ix=0 

timeit() {
  this_ts=$(date +%s.%N)
  #echo $(echo "$this_ts - $start;$this_ts - $last_ts" | bc -l | tr '\n' ' ')" $*"
  last_ts=$this_ts
}

iop() {

  coproc { 
    if [[ -z "$1" ]] ; then
      { timeout 4s wc -l < "$m3u"; } 2> /dev/null;
      echo -e "\t"; 

      timeout 4s cat "$i"/domain 2> /dev/null;
      echo -e "\t"; 
    fi

    local flist=( "$i"/*.{mp3,ogg,m4a,m5a,flac,aiff,wav} )
    echo ${#flist[@]}
    echo -e "\t"; 

    sleep 7; 
  }
}

start=$(date +%s.%N)
last_ts=$start
while [[ ${#all[@]} -gt $ix ]]; do
  # This approach permits for new content to come in and multiple
  # to be running without issue.
  timeit "start loop"
  [[ -z "$NOSCORE" && -z "$NOSCAN" ]] && load_tracks 

  # This can potentially skip things in with a reload
  # but it's fine ... 
  i=${all[$ix]}
  m3u="$i/$PLAYLIST"

  if [[ -n "$direct" ]]; then
    i=$direct
    direct=
  fi

  iop

  m3u="$i/$PLAYLIST"

  (( ix ++ ))
  f_count=0
  listen_time=0

  timeit "before record"
  read -r -d "$delim" -u ${COPROC[0]} t_count
  t_count=${t_count:-0}

  # We assume the directory exists unless this fails 
  # then we question that assumption
  if [[ $t_count -gt 0 ]]; then
    hasm3u=1
  else
    hasm3u=
    if [[ ! -d "$i" ]]; then
      grep -m 1 $i $start_dir/.listen_done > /dev/null
      # This means it's in the done but not the all, which is fine.
      [[ $? -eq 0 ]] && continue

      status "Gone - $i"
      n="__purge"
      record_listen
      continue;
    fi
  fi
  timeit "after record"

  # This looks for existence so we skip the format check for now.
  if [[ "$hasm3u" || -n "$(ls "$i"/*.{mp3,ogg,m4a,m5a,flac,aiff,wav} 2>/dev/null)" ]]; then

    attempts=0
    cycles=0
    url=
    while [[ 0 ]]; do
      [[ $cycles -gt 0 ]] && iop 1

      (( cycles ++ ))
      n="__nothing"
      _tabs

      timeit "display"

      if [[ -z "$url" ]]; then
        read -r -d "$delim" -u ${COPROC[0]} url
        timeit "domain-read"
      fi

      # This block is uncommon
      if [[ -z "$url" ]]; then
        label=$( dirname "$i" )
        [[ -e $label/domain ]] && domain=$(< $label/domain ) || domain=${label}.bandcamp.com
        release=$( basename "$i" )
        url="https://$domain/album/$release"
      fi
      timeit "block-exec"

      headline 2 "$ix\t$i"
      status "${url:8}"

      if [[ -z "$NOPL" && ! "$hasm3u" && ! -e "$i"/no-files ]]; then

        if [[ -e "$i"/no ]]; then
          status "Why am I here? it's marked as no"
          [[ -n "$COPROC_PID" ]] && kill $COPROC_PID 
          n=p
          break
        fi

        status "Getting $m3u" nl
        get_playlist "$url" "$i"
        hasm3u=1
      fi

      if [[ "$hasm3u" && -z "$nopl" ]]; then
        [[ -n "$REMOTEPL" ]] && playlistIsRemote=$(grep -i http $m3u)
        while [[ 0 ]]; do

          if [[ -z "$playlistIsRemote" || $(( $(date +%s) - $(stat -c %Y "$m3u") )) -lt $DAY ]]; then
            
            timeit "counter"
            read -r -d "$delim" -u ${COPROC[0]} f_count
            [[ -n "$COPROC_PID" ]] && kill $COPROC_PID
            timeit "coproc"

            if [[ $f_count != $t_count ]]; then
              headline 1 "Playlist has $t_count, there's $f_count here. Ignoring playlist (dir: $i)"
              [[ $f_count > $t_count ]] && pl_fallback "$i" || echo "Check this one."
              t_count=$f_count
              # Because of the above inequality check this would imply
              # that the t_count is also 0
            elif [[ $f_count == 0 ]]; then
              n=p
              break
            fi

            if [[ $t_count != 1 ]]; then 
              headline 1 "$t_count tracks" 
            else
              [[ "$url" =~ "/track" ]] && headline 1 "single" || headline 1 "1 track"
            fi

            # Here's where the conversion magic happens if needed.
            if [[ $FMT != "mp3" && -z "$NONET" ]]; then
              timeit "convert"
              ssh $REMOTE "source .{zshrc,profile};mpv-lib to$FMT $REMOTEBASE/$i"
              sed "s/mp3/$FMT/" "$i"/$PLAYLIST > "$i"/playlist-$FMT.m3u
              m3u="$i"/playlist-$FMT.m3u
            fi
            timeit "player"
            playit "$m3u"
            player_exit=$?

            ( ardy_stat 2 "..done.." ) &

            ## See the lua script for how this is invoked, (as of this writing it's capital Q)
            case $player_exit in 
              13|14|15)
                echo "HERE"
                # 4 is what mpv does on ctrl+c
                # so we add 10 to avoid the collision
                n=$(( player_exit - 10 ))
                skipprompt=1 
                ;;
              6)
                n=s
                skipprompt=1 
                ;;
              7)
                NOPROMPT=
                skipprompt=
                ;;
              8)
                n=p
                skipprompt=1 
                ;;

              [0-4])
                # if it exited naturally we send an audio indicator
                breaker
                ;;

              5) player_exit=0 
                ;;

              *)
                echo "Exited with $player_exit!"
                ;;
            esac

            (( listen_time += $(date +%s) - before ))
            [[ -z "$NOSCORE" ]] && headline 3 "Time: $listen_time\n"
          else
            # If our m3u is over a day old we just
            # assume failure
            player_exit=1
          fi

          if [[ $player_exit == "1" ]]; then
            status "Woops, need to get a new set of urls"
            if [[ $attempts -gt 2 ]]; then
              status "This isn't going that well"
              break
            fi

            get_urls "$url" "$i"
            (( attempts ++ ))
            iop 1
            continue
          fi
          break
        done
      elif [[ -e "$i"/no-files ]]; then

        headline 1 "No files"
        [[ -n "$COPROC_PID" ]] && kill $COPROC_PID; 
        ls -ltr "$i"  |  sed 's/^/\t\t/'
        n=p
        hr
        break
      else 

        # In order to minimize the number of these calls we make
        # to decrease network iops, we check the arity of the function
        # to see if these files exist
        ls $start_dir/"$i"/*.{$FMT,ogg,m4a,m5a,flac,aiff,wav}  > $tmp/play.m3u
        playit $tmp/play.m3u

        if [[ $? != -10 ]]; then
          (( listen_time += $(date +%s) - before ))
          headline 3 "Time: $listen_time"
        else
          if [[ -n "$LOCAL" ]]; then
            status "No local files, skipping"
            n=s
            hr
            break
          fi

          # only do a single download/play loop attempt
          if [[ -z "$auto" ]]; then
            status "I'll try to download things again" 
            get_mp3s "$url" "$i"
            auto=1
            continue

          else
            status "Not trying that again!"
          fi
        fi

      fi

      [[ "$n" != "__nothing" ]] && break

      while [[ 0 ]]; do
        _repl
        [[ "$n" == 'source' ]] && source $DIR/lib.sh || break
      done

      [[ $n == 'x' ]] && finish
      [[ $n == 'r' ]] || break
    done
    start=$(date +%s.%N)

    _stats="time:$listen_time:$f_count"

    if [[ $n == 'p' ]]; then 
      album_purge "$_stats" "$i" &
      n="__purge"

    elif [[ $n == 's' ]]; then
      status "Skipping"
      n=__nothing

    else
      n=__rating_$n
    fi
    [[ -n "$skipprompt" ]] && hr
  fi
  # This can fix when mount point hangups and reconnects can occur
  # and comes at a very little cost otherwise
  cd $start_dir

  # The repeat while ignoring playlist is a one-time
  # flag that has to be set the next time
  nopl=
  auto=
  skipprompt=
  [[ -z "$NOSCORE" ]] && record_listen
done
