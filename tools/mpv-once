#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $DIR/lib.sh

player=mpv
player_opts_orig='--no-cache --no-audio-display --msg-level=cplayer=no --term-playing-msg=\n${media-title} --script='"$DIR"'/mpv-interface.lua --input-ipc-server='"$tmp"'/mpvsocket'
player_opts_dbg="--msg-level=all=debug"
player_opts=$player_opts_orig
display=0
pipe=$tmp/mpv-pipe
auto=
start_time=0:45
ao=${ao:-pulse}
myname="mpv-once-$RANDOM-$PPID"

# We're going to restore it to this.
start_name=$( tmux display-message -p '#W' )
start_dir=$( pwd )
STR=(on off)

[[ -n "$NOSCORE" ]] && NOPROMPT=1 || NOPROMPT=
# [[ -e $pipe ]] || mkfifo $pipe

[[ -e $DIR/prefs.sh ]] && . $DIR/prefs.sh
# We don't do anything above this in case
# we are trying to get something to override our vars

[[ -d $tmp ]] || mkdir $tmp

setname() {
  [[ -n "$WINDOWID" ]] && xprop -id "$WINDOWID" -set WM_NAME "$myname" > /dev/null 2>&1
  tmux rename-session $myname #2> /dev/null
  echo $myname > $tmp/tmux-name
}

setname

function finish {
  history -w $tmp/readline-history
  tmux rename-window "$start_name"
  exit
}

history -r $tmp/readline-history
shopt -s nullglob
trap finish EXIT

# This allows remote control
#if [[ -n "$1" ]]; then
#  mpv $1/*mp3
#  exit
#fi

function set_filter() {
  filter=.
  if [[ $# -gt 0 ]]; then
    filter="($1"
    shift
    while [[ $# -gt 0 ]]; do
      filter="${filter}|${1}"
      shift
    done
    filter="$filter)"
  fi
}

# This appears to take about 0.1s or so.
function load_tracks() {
  all=( $(unlistened "$filter") )
  size=${#all[@]}
  [[ -n "$1" ]] && echo $size
}

function record_listen() {
  local lock="$tmp/backup-lock"
  if [[ "$n" != "__nothing" ]]; then 
    {
      cp $start_dir/.listen_done $tmp/.listen_done-$(date +%Y%m%d%H%M%S)

      # Remove any previous record of this
      st=$( echo "$i" | tr '//' '.' )
      sed -i "/$st/d" $start_dir/.listen_done

      # Also record how many audio files we saw at the time
      echo "$i $n ($_stats) $(date +%Y%m%d)" >> $start_dir/.listen_done

      # If we do this too frequently it's pretty broken
      # But we also have to be smart enough to not block us out
      if [[ -e "$lock" ]]; then
        local age=$(( $( date +%s ) - $(stat -c %Y "$lock") ))
        (( age > 86400 )) && rm $lock
      fi

      if [[ ! -e "$lock" ]]; then
        touch "$lock"
        backup 
        rm "$lock"
      fi
    } &
  fi
}

function playit() {
  $player --ao=$ao $player_opts \
    --term-playing-msg=" \${playlist-pos-1}\t\${media-title}" \
    --term-status-msg="\t\t\${audio-pts} - \${duration}\n" \
    --start=$start_time \
    $*
}

[[ -f "$1" ]] && set_filter $(< $1) || set_filter $*

scan

touch $start_dir/.listen_done

load_tracks 1

ix=0 
direct=

while [[ ${#all[@]} -gt 0 ]]; do
  # This approach permits for new content to come in and multiple
  # to be running without issue.
  #
  # However When scoring is off there is no mechanism to make the playlist
  # shrink
  if [[ -z "$NOSCORE" && -z "$NOSCAN" ]]; then 
    load_tracks 
  else
    all=("${all[@]:1}")
  fi

  i=${all[0]}

  if [[ -n "$direct" ]]; then
    i=$direct
    direct=
  fi

  setname
  (( ix ++ ))
  n="__nothing"
  f_count=0
  listen_time=0

  if [[ ! -d "$i" ]]; then
    grep -m 1 $i $start_dir/.listen_done > /dev/null
    # This means it's in the done but not the all, which is fine.
    [[ $? -eq 0 ]] && continue

    status "Gone - $i"
    n="__purge"
    record_listen
    continue
  fi

  ls "$i"/*.{mp3,aiff,wav} > /dev/null 2>&1
  if [[ $? == "0" || -e "$i/$PLAYLIST" ]]; then

    attempts=0
    while [[ 0 ]]; do
      _tabs

      if [[ -e "$i/domain" ]]; then
        url=$(< "$i/domain" )
      else
        label=$( dirname "$i" )
        [[ -e $label/domain ]] && domain=$(< $label/domain ) || domain=${label}.bandcamp.com
        release=$( basename "$i" )
        url="https://$domain/album/$release"
      fi

      headline 2 "$ix\t$url"
      status "$start_dir/$i"
      #printf "\n%11s - %s\n%11s - %s\n" "$ix / $size" "$start_dir/$i" "" "$url"

      m3u="$i/$PLAYLIST"
      fileList=( "$i"/*.{mp3,aiff,wav} )

      if [[ -e "$m3u" ]]; then
        ttl=$( grep -c $PLAYLIST "$m3u" )
        if [[ $ttl != 0 ]]; then
          status "Bogus m3u. Deleting"
          rm "$m3u"
        fi
      fi
      
      if [[ -e "$i"/no ]]; then
        status "Why am I here? it's marked as no"
        n='p'
        break
      fi

      if [[ ! -e "$m3u" && ! -e "$i"/no-files && -z "$NOPL" ]]; then
        status "Getting $m3u" nl
        get_playlist "$url" "$i"
      fi

      if [[ -s "$m3u" && -z "$nopl" ]]; then
        playlistIsRemote=$(grep -i http $m3u)
        while [[ 0 ]]; do

          before=$( date +%s )
          age=$(( before - $(stat -c %Y "$m3u") ))

          if [[ -z "$playlistIsRemote" || $age -lt $DAY ]]; then
            
            t_count=$(cat "$m3u" | wc -l)
            f_count=${#fileList[@]}

            if [[ $f_count != $t_count ]]; then
              headline 1 "Playlist has $t_count, there's $f_count here. Ignoring playlist"
              if [[ $f_count > $t_count ]]; then
                pl_fallback "$i"
                t_count=$(cat "$m3u" | wc -l)
              else
                echo "Check this one."
              fi
            fi

            if [[ $t_count != 1 ]]; then 
              headline 1 "$t_count tracks" 
            else
              [[ "$url" =~ "/track" ]] && headline 1 "single" || headline 1 "1 track"
            fi

            playit "$m3u"
            player_exit=$?

            ## See the lua script for how this is invoked, (as of this writing it's capital Q)
            case $player_exit in 
              2)
                n=p
                skipprompt=1 
                ;;
              [13-15])
                # 4 is what mpv does on ctrl+c
                # so we add 10 to avoid the collision
                n=$(( player_exit - 10 ))
                skipprompt=1 
                ;;
              6)
                n=s
                skipprompt=1 
                ;;
              7)
                NOPROMPT=
                skipprompt=
                ;;
            esac

            (( listen_time += $(date +%s) - before ))
            [[ -z "$NOSCORE" ]] && headline 3 "Time: $listen_time\n"
          else
            # If our m3u is over a day old we just
            # assume failure
            status "m3u age: $(( age / DAY ))d"
            player_exit=1
          fi

          if [[ $player_exit == "1" ]]; then
            status "Woops, need to get a new set of urls"
            if [[ $attempts -gt 2 ]]; then
              status "This isn't going that well"
              break
            fi

            get_urls "$url" "$i"
            (( attempts ++ ))
            continue
          fi
          break
        done
      elif (( ${#fileList[@]} )); then

        before=$( date +%s )
          
        $player --ao=$ao $player_opts \
          --term-playing-msg=" \${playlist-pos-1}\t\${media-title}" \
          --term-status-msg="\t\t\${audio-pts} - \${duration}\n" \
          --start=$start_time \
          "$i"/*.mp3

        (( listen_time += $(date +%s) - before ))

        headline 3 "Time: $listen_time"
      elif [[ -e "$i"/no-files ]]; then

        headline 1 "No files"
        ls -ltr "$i"  |  sed 's/^/\t\t/'
        n='p'
        hr
        break

      else
        if [[ -n "$LOCAL" ]]; then
          status "No local files, skipping"
          n="s"
          hr
          break
        fi

        # only do a single download/play loop attempt
        if [[ -z "$auto" ]]; then
          status "I'll try to download things again" 
          get_mp3s "$url" "$i"
          auto=1
          continue

        else
          status "Not trying that again!"
        fi

      fi

      while [[ 0 ]]; do
        _repl
        if [[ "$n" == 'source' ]]; then
          . $DIR/lib.sh
        else
          break
        fi
      done

      [[ $n == 'x' ]] && finish
      [[ $n == 'r' ]] || break
    done

    _stats="time:$listen_time:$f_count"

    if [[ $n == 'p' ]]; then 
      album_purge "$_stats" "$i" &
      n="__purge"

    elif [[ $n == 's' ]]; then
      status "Skipping"
      n="__nothing"

    else
      n="__rating_$n"
    fi
    [[ -n "$skipprompt" ]] && hr
  fi
  # The repeat while ignoring playlist is a one-time
  # flag that has to be set the next time
  nopl=
  auto=
  skipprompt=
  [[ -z "$NOSCORE" ]] && record_listen
done
