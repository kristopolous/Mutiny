#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. $DIR/lib.sh
. $DIR/prefs.sh

# we're going to restore it to this.
start_name=$( tmux display-message -p '#W' )
start_dir=$(pwd)
start_time=0:45
ao=${ao:-pulse}
day=86400

shopt -s nullglob

tmux rename-window "mpv-once" 2> /dev/null

function finish {
  tmux rename-window "$start_name"
  exit
}
trap finish EXIT

# This allows remote control
#if [[ -n "$1" ]]; then
#  mpv $1/*mp3
#  exit
#fi

filter=.
if [[ $# -gt 0 ]]; then
  filter="($1"
  shift
  while [[ $# -gt 0 ]]; do
    filter="${filter}|${1}"
    shift
  done
  filter="$filter)"
fi


echo */* | tr ' ' '\n' > .listen_all
touch .listen_done
all=( $(cat .listen_all .listen_done | awk ' { print $1 } ' | grep -E "$filter" | sort | uniq -u | shuf) )
size=${#all[@]}
ix=0 
for i in ${all[@]}; do
  (( ix ++ ))
  n=__nothing
  ls "$i"/*.mp3 "$i"/*.aiff > /dev/null 2>&1
  listen_time=0
  if [[ $? == "0" || -e $i/url-list.m3u ]]; then
    while [[ 0 ]]; do
      if [[ -e $i/domain ]]; then
        url=$(< $i/domain )
      else
        label=$( dirname $i )
        [[ -e $label/domain ]] && domain=$(< $label/domain ) || domain=${label}.bandcamp.com
        release=$( basename $i )
        url="https://$domain/album/$release"
      fi

      printf "\n%10s | %s\n%10s | %s\n\n" "$ix / $size" "$start_dir/$i" "" "$url"

      list="$i/*.mp3 $i/*.aiff"
      attempts=0
      m3u=$i/url-list.m3u
      fileList=( $list )

      if (( ${#fileList[@]} )); then
        before=$( date +%s )
        set -x
        $player --ao=$ao $player_opts \
          --start=$start_time --no-audio-display \
          $list

        (( listen_time += $(date +%s) - before ))

        echo "listen-time $listen_time"
      elif [[ -z "$LOCAL" && -e $m3u ]]; then
        while [[ 0 ]]; do

          before=$( date +%s )
          age=$(( $before - $(stat -c %Y "$m3u") ))

          if [[ $age -lt $day ]]; then
            $player --ao=$ao $player_opts \
              --no-cache \
              --start=$start_time --no-audio-display \
              "$m3u"

            player_exit=$?
            (( listen_time += $(date +%s) - before ))
            echo "listen-time $listen_time"
          else
            # If our m3u is over a day old we just
            # assume failure
            echo "m3u age: $(( age / day ))d"
            player_exit=2
          fi

          if [[ $player_exit == "2" ]]; then
            echo "woops, need to get a new set of urls"
            if [[ $attempts -gt 2 ]]; then
              echo "This isn't going that well."
              break
            fi
            get_urls "$url" "$i"
            (( attempts ++ ))
            continue
          fi
          break
        done

      elif [[ -e "$i"/no-files ]]; then
        echo "There appears to be no files in $i."
        ls -ltr $i
        n='pu'
        break
      else
        if [[ -n "$LOCAL" ]]; then
          echo "No local files, skipping"
          n="sn"
          break
        fi

        echo "Hrmm, I don't know what to do here."
      fi

      while [[ 0 ]]; do
        read -p "$i >> " -e n
        [[ $n == 'i' ]] && echo $url

        if [[ ${n:0:2} == 'ao' ]]; then
          ao=${n:3}
          echo "Setting audio out to '$ao'"
          [[ -e $DIR/prefs.sh ]] && sed -Ei 's/ao=.*/ao='$ao'/g' $DIR/prefs.sh
        elif [[ ${n:0:1} == 'b' ]]; then
          start_time=${n:2}
          echo "Setting start time to $start_time"
        elif [[ $n == 'l' ]]; then
          if [[ -e $m3u ]]; then
            cat $m3u
          else
            ls -l $i
          fi
        fi

        if [[ $n == 'debug' ]]; then
          echo $PWD
          set -x
        fi
        [[ $n == 'dl' ]] && get_mp3s "$url" "$i"
        [[ "$n" =~ ^(x|r|s|sn|[1-5]|pu)$ ]] && break
      done

      [[ $n == 'x' ]] && exit
      [[ $n == 'r' ]] || break
    done

    if [[ $n == 'pu' ]]; then 
      $DIR/album-purge "$i" $start_dir
      n="__purge"
    elif [[ $n == 'sn' ]]; then
      echo "Skipping (not recording) ..."
      n="__nothing"
    elif [[ $n == 's' ]]; then
      echo "Skipping ... "
      n="__skipping"
    else
      n="__rating_$n"
    fi
  fi
  [[ "$n" != "__nothing" ]] && echo "$i $n (time:$listen_time) $(date +%Y%m%d)" >> .listen_done
done
